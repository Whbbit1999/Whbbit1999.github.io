<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WHBBIT</title>
  <icon>https://www.gravatar.com/avatar/317448a5b3bd08f4eeb1133ad225bdfd</icon>
  <subtitle>月空人 | blog.whbbit.cn</subtitle>
  <link href="http://blog.whbbit.cn/atom.xml" rel="self"/>
  
  <link href="http://blog.whbbit.cn/"/>
  <updated>2022-02-06T11:08:46.514Z</updated>
  <id>http://blog.whbbit.cn/</id>
  
  <author>
    <name>whbbit</name>
    <email>whbbit@outlook.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Element UI Table组件使用心得</title>
    <link href="http://blog.whbbit.cn/2022/02/06/blog/2022-02-04-element/"/>
    <id>http://blog.whbbit.cn/2022/02/06/blog/2022-02-04-element/</id>
    <published>2022-02-06T11:08:46.514Z</published>
    <updated>2022-02-06T11:08:46.514Z</updated>
    
    <content type="html"><![CDATA[<h2 id="循环数据来展示-element-表格"><a href="#循环数据来展示-element-表格" class="headerlink" title="循环数据来展示 element 表格"></a>循环数据来展示 element 表格</h2><blockquote><p><code>element</code> 使用循环和 <code>template</code> 实现一个 <code>table-column</code>循环数据和数据的过滤</p></blockquote><h3 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-table :data=&quot;tableData&quot;&gt;</span><br><span class="line">    &lt;el-table-column</span><br><span class="line">      v-for=&quot;col in column&quot;</span><br><span class="line">      :key=&quot;col.id&quot;</span><br><span class="line">      :prop=&quot;col.prop&quot;</span><br><span class="line">      :lable=&quot;col.label&quot;</span><br><span class="line">      :width=&quot;col.width&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;template slot-scope=&quot;&#123; row &#125;&quot;&gt;</span><br><span class="line">        &lt;span v-if=&quot;column.prop == &#x27;name&#x27;&quot;&gt;</span><br><span class="line">          &#123;&#123; row.name | nameFilter &#125;&#125;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">        &lt;span v-else&gt;</span><br><span class="line">          &#123;&#123; row[column.prop] &#125;&#125;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/el-table-column&gt;</span><br><span class="line">  &lt;/el-table&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  filter: &#123;</span><br><span class="line">    nameFilter(val) &#123;</span><br><span class="line">      return val;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      column: [</span><br><span class="line">        &#123; prop: &quot;id&quot;, label: &quot;ID&quot;, width: &quot;&quot; &#125;,</span><br><span class="line">        &#123; prop: &quot;name&quot;, label: &quot;姓名&quot;, width: &quot;&quot; &#125;,</span><br><span class="line">      ],</span><br><span class="line">      tableData: [</span><br><span class="line">        &#123; id: 1, name: &quot;a&quot; &#125;,</span><br><span class="line">        &#123; id: 2, name: &quot;b&quot; &#125;,</span><br><span class="line">        &#123; id: 3, name: &quot;c&quot; &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="动态设置表格的高度"><a href="#动态设置表格的高度" class="headerlink" title="动态设置表格的高度"></a>动态设置表格的高度</h2><blockquote><p>大概就是使用 element 表格的<code>height: 100</code>来进行设置，外部使用一个容器包裹起来。</p></blockquote><h3 id="代码如下-1"><a href="#代码如下-1" class="headerlink" title="代码如下"></a>代码如下</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!-- 这里的style动态绑定，其中的height可以根据数据进行动态绑定 --&gt;</span><br><span class="line">&lt;div :style=&quot;&#123;</span><br><span class="line">  display: &#x27;flex&#x27;,</span><br><span class="line">  height: &#x27;500px&#x27;</span><br><span class="line">&#125;&quot;&gt;</span><br><span class="line">&lt;el-table height=&quot;100%&quot;&gt;</span><br><span class="line">  ...</span><br><span class="line">  &lt;!-- el-table内容 --&gt;</span><br><span class="line">&lt;/el-table&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><blockquote><p>这里的外层容器需要设置为 flex 布局，里面的 el-table 的 height 属性设置为 100%</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;循环数据来展示-element-表格&quot;&gt;&lt;a href=&quot;#循环数据来展示-element-表格&quot; class=&quot;headerlink&quot; title=&quot;循环数据来展示 element 表格&quot;&gt;&lt;/a&gt;循环数据来展示 element 表格&lt;/h2&gt;&lt;blockquo</summary>
      
    
    
    
    <category term="心得体会" scheme="http://blog.whbbit.cn/blog/categories/%E5%BF%83%E5%BE%97%E4%BD%93%E4%BC%9A/"/>
    
    
    <category term="ElementUI" scheme="http://blog.whbbit.cn/blog/tags/elementui/"/>
    
    <category term="心得体会" scheme="http://blog.whbbit.cn/blog/tags/%E5%BF%83%E5%BE%97%E4%BD%93%E4%BC%9A/"/>
    
  </entry>
  
  <entry>
    <title>hexo自动部署</title>
    <link href="http://blog.whbbit.cn/2022/02/06/blog/20220205-hexo-deployer/"/>
    <id>http://blog.whbbit.cn/2022/02/06/blog/20220205-hexo-deployer/</id>
    <published>2022-02-06T11:08:46.514Z</published>
    <updated>2022-02-06T11:08:46.514Z</updated>
    
    <content type="html"><![CDATA[<p>折腾 hexo 自动部署的过程</p><span id="more"></span><p>GitHub Actions</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="安装插件hexo-deployer-git"><a href="#安装插件hexo-deployer-git" class="headerlink" title="安装插件hexo-deployer-git"></a>安装插件<a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a></h3><h3 id="创建-GitHub-主页"><a href="#创建-GitHub-主页" class="headerlink" title="创建 GitHub 主页"></a>创建 GitHub 主页</h3><h3 id="服务器部署-git"><a href="#服务器部署-git" class="headerlink" title="服务器部署 git"></a>服务器部署 git</h3><h3 id="配置-config-yml-文件"><a href="#配置-config-yml-文件" class="headerlink" title="配置 _config.yml 文件"></a>配置 <code>_config.yml</code> 文件</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">&lt;repository</span> <span class="string">url&gt;</span> <span class="comment">#https://bitbucket.org/JohnSmith/johnsmith.bitbucket.io</span></span><br><span class="line">  <span class="attr">branch:</span> [<span class="string">branch</span>]</span><br><span class="line">  <span class="attr">message:</span> [<span class="string">message</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;折腾 hexo 自动部署的过程&lt;/p&gt;</summary>
    
    
    
    <category term="hexo" scheme="http://blog.whbbit.cn/blog/categories/hexo/"/>
    
    
    <category term="hexo" scheme="http://blog.whbbit.cn/blog/tags/hexo/"/>
    
    <category term="服务器" scheme="http://blog.whbbit.cn/blog/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>markdown基础语法</title>
    <link href="http://blog.whbbit.cn/2022/02/06/blog/markdown/"/>
    <id>http://blog.whbbit.cn/2022/02/06/blog/markdown/</id>
    <published>2022-02-06T11:08:46.514Z</published>
    <updated>2022-02-06T11:08:46.514Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章大概将常用的 markdown 基础语法进行了一下整理</p><span id="more"></span><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><blockquote><p>是几级标题就在前面加几个 <code>#</code></p></blockquote><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"></span><br><span class="line"><span class="section">## 二级标题</span></span><br><span class="line"></span><br><span class="line"><span class="section">### 三级标题</span></span><br><span class="line"></span><br><span class="line"><span class="section">#### 四级标题</span></span><br><span class="line"></span><br><span class="line"><span class="section">##### 五级标题</span></span><br><span class="line"></span><br><span class="line"><span class="section">###### 六级标题</span></span><br></pre></td></tr></table></figure><blockquote><p>标题最小只能到六级，再多的话就不起作用了。</p></blockquote><hr><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>总体来说，表格的写法在 markdown 中是很简单的。其余位置不变，只要吧<code>| --- | --- | --- |</code> 这行的 <code>---</code> 前或后标注上 <code>:</code> 就能代表对应的对齐方式</p><blockquote><p>左对齐<code>| :--- | :--- | :--- |</code><br>右对齐<code>| ---: | ---: | ---: |</code><br>居中对齐<code>| :---: | :---: | :---: |</code><br>混合使用<code>| :--- | :---: | ---: |</code></p></blockquote><p>示例如下：</p><h3 id="默认对齐方式"><a href="#默认对齐方式" class="headerlink" title="默认对齐方式"></a>默认对齐方式</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| 序号 | 作者   | 作品     |</span><br><span class="line">| ---- | ------ | -------- |</span><br><span class="line">| 1    | 余华   | 活着     |</span><br><span class="line">| 2    | 刘慈欣 | 三体     |</span><br><span class="line">| 3    | 莫言   | 丰乳肥臀 |</span><br></pre></td></tr></table></figure><table><thead><tr><th>序号</th><th>作者</th><th>作品</th></tr></thead><tbody><tr><td>1</td><td>余华</td><td>活着</td></tr><tr><td>2</td><td>刘慈欣</td><td>三体</td></tr><tr><td>3</td><td>莫言</td><td>丰乳肥臀</td></tr></tbody></table><h3 id="左对齐"><a href="#左对齐" class="headerlink" title="左对齐"></a>左对齐</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| 序号 | 作者   | 作品     |</span><br><span class="line">| :--- | :----- | :------- |</span><br><span class="line">| 1    | 余华   | 活着     |</span><br><span class="line">| 2    | 刘慈欣 | 三体     |</span><br><span class="line">| 3    | 莫言   | 丰乳肥臀 |</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">序号</th><th align="left">作者</th><th align="left">作品</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">余华</td><td align="left">活着</td></tr><tr><td align="left">2</td><td align="left">刘慈欣</td><td align="left">三体</td></tr><tr><td align="left">3</td><td align="left">莫言</td><td align="left">丰乳肥臀</td></tr></tbody></table><h3 id="右对齐"><a href="#右对齐" class="headerlink" title="右对齐"></a>右对齐</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| 序号 |   作者 |     作品 |</span><br><span class="line">| ---: | -----: | -------: |</span><br><span class="line">|    1 |   余华 |     活着 |</span><br><span class="line">|    2 | 刘慈欣 |     三体 |</span><br><span class="line">|    3 |   莫言 | 丰乳肥臀 |</span><br></pre></td></tr></table></figure><table><thead><tr><th align="right">序号</th><th align="right">作者</th><th align="right">作品</th></tr></thead><tbody><tr><td align="right">1</td><td align="right">余华</td><td align="right">活着</td></tr><tr><td align="right">2</td><td align="right">刘慈欣</td><td align="right">三体</td></tr><tr><td align="right">3</td><td align="right">莫言</td><td align="right">丰乳肥臀</td></tr></tbody></table><h3 id="居中对齐"><a href="#居中对齐" class="headerlink" title="居中对齐"></a>居中对齐</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| 序号 |  作者  |   作品   |</span><br><span class="line">| :--: | :----: | :------: |</span><br><span class="line">|  1   |  余华  |   活着   |</span><br><span class="line">|  2   | 刘慈欣 |   三体   |</span><br><span class="line">|  3   |  莫言  | 丰乳肥臀 |</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">序号</th><th align="center">作者</th><th align="center">作品</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">余华</td><td align="center">活着</td></tr><tr><td align="center">2</td><td align="center">刘慈欣</td><td align="center">三体</td></tr><tr><td align="center">3</td><td align="center">莫言</td><td align="center">丰乳肥臀</td></tr></tbody></table><h3 id="混合使用"><a href="#混合使用" class="headerlink" title="混合使用"></a>混合使用</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| 序号 |  作者  |     作品 |</span><br><span class="line">| :--- | :----: | -------: |</span><br><span class="line">| 1    |  余华  |     活着 |</span><br><span class="line">| 2    | 刘慈欣 |     三体 |</span><br><span class="line">| 3    |  莫言  | 丰乳肥臀 |</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">序号</th><th align="center">作者</th><th align="right">作品</th></tr></thead><tbody><tr><td align="left">1</td><td align="center">余华</td><td align="right">活着</td></tr><tr><td align="left">2</td><td align="center">刘慈欣</td><td align="right">三体</td></tr><tr><td align="left">3</td><td align="center">莫言</td><td align="right">丰乳肥臀</td></tr></tbody></table><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>markdown 支持有序列表和无序列表</p><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>有序列表可以使用 <code>阿拉伯数字. 列表内容</code> 来表示，也可以在其下一行开始前添加四个空格后进行嵌套使用。</p><p>示例如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">今年要做的事：</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 学习编程语言</span><br><span class="line"><span class="bullet">   1.</span> JavaScript 深入学习</span><br><span class="line"><span class="bullet">   2.</span> Nest.js 框架学习</span><br><span class="line"><span class="bullet">   3.</span> MongoDB 数据库学习</span><br><span class="line"><span class="bullet">   4.</span> 这是第二项内容</span><br><span class="line"><span class="bullet">2.</span> ...</span><br></pre></td></tr></table></figure><p>今年要做的事：</p><ol><li>学习编程语言<ol><li>JavaScript 深入学习</li><li>Nest.js 框架学习</li><li>MongoDB 数据库学习</li><li>这是第二项内容</li></ol></li><li>…</li></ol><blockquote><p>这里的嵌套后序号的表示可能在不同的 markdown 解析后展示效果有所不同</p></blockquote><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>无序列表可以使用 <code>-</code> <code>+</code> <code>*</code> 开始，后面添加一空格隔开列表项来进行使用</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">常用的编程语言：</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> JavaScript</span><br><span class="line"><span class="bullet">-</span> Java</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> c++</span><br><span class="line"><span class="bullet">*</span> c#</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> go</span><br><span class="line"><span class="bullet">-</span> python</span><br></pre></td></tr></table></figure><p>常用的编程语言：</p><ul><li>JavaScript</li><li>Java</li></ul><ul><li>c++</li><li>c#</li></ul><ul><li>go</li><li>python</li></ul><blockquote><p>与有序列表相同，无序列表也可以进行嵌套。嵌套规则和有序列表一致。当然，也可以两者混合使用。</p></blockquote><h2 id="代码片段"><a href="#代码片段" class="headerlink" title="代码片段"></a>代码片段</h2><blockquote><p>作为程序员，代码和我们的工作息息相关。没有网上的现成代码片段进行复制，我们的生活怎么能快乐呢 :)</p></blockquote><h3 id="行级代码片段（字符）表述方式"><a href="#行级代码片段（字符）表述方式" class="headerlink" title="行级代码片段（字符）表述方式"></a>行级代码片段（字符）表述方式</h3><blockquote><p>这种一般用来表示强调或特殊字符&#x2F;组合的内容<br>在想要高亮的字符前后加上反引号 ` 来表示</p></blockquote><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><p>我们复制一段文字通常要选中后使用 <code>CTRL</code> + <code>C</code> 的快捷键进行快速复制。</p><h3 id="块级代码片段表述方式"><a href="#块级代码片段表述方式" class="headerlink" title="块级代码片段表述方式"></a>块级代码片段表述方式</h3><ol><li>可以在代码片段前后使用 ``` 进行包裹，而且可以在代码片段前的 ``` 后加上代码块中的编程语言，来进行高亮代码块</li></ol><blockquote><p>下面的示例中就是使用 ``` javascript 来进行 js 语法的高亮</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;hello world&quot;</span>);</span><br></pre></td></tr></table></figure><ol start="2"><li>可以将 ``` 替换为 ~~~ 来进行使用，效果相同</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>我这里因为 vs code 的插件，这样书写会自动帮我转换为 ``` 的书写形式<br>不过我相信，您最常见到的书写形式也是使用第一种来进行书写，因为想要输出 <code>~</code> 字符的话得摁着 shift 键加上 ` 来进行输出（相同的键位，莫名多了一次操作，我想没什么人会这样写）</p></blockquote><hr><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>有时我们在文章中提到的东西希望可以快速访问，这时我们就可以使用链接来进行跳转。</p><p>使用方式大概是 <code>[链接显示的文字](链接地址)</code></p><blockquote><p>如果 <code>[]</code> 中不书写内容，会默认展示后面的链接到页面上</p></blockquote><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这里是[<span class="string">您的哔哩哔哩主页</span>](<span class="link">https://space.bilibili.com/</span>)</span><br></pre></td></tr></table></figure><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p>这里是<a href="https://space.bilibili.com/">您的哔哩哔哩主页</a></p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>图片的插入方式和链接不同之处就是在 <code>[]</code> 前添加一个 <code>!</code></p><blockquote><p>[] 中填写的内容是图片加载不出来是代替的文字，相当于 html img 标签的 alt 属性</p></blockquote><h3 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">我的GitHub头像</span>](<span class="link">https://avatars.githubusercontent.com/u/60510247?v=4</span>)</span><br><span class="line"></span><br><span class="line">![<span class="string">这是我乱写的一个地址</span>](<span class="link">https://avatars.mygithubusercontent.com/u/60510247?v=4</span>)</span><br></pre></td></tr></table></figure><h3 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h3><p><img src="https://avatars.githubusercontent.com/u/60510247?v=4" alt="我的GitHub头像"></p><p><img src="https://avatars.mygithubusercontent.com/u/60510247?v=4" alt="这是我乱写的一个地址"></p><h2 id="文字效果"><a href="#文字效果" class="headerlink" title="文字效果"></a>文字效果</h2><p>有时我们需要对一些文字进行标注和突出显示，除了使用之前说过的<a href="/docs/markdown/code">行级代码片段</a>进行展示，我们还可以对文字进行加粗和倾斜操作</p><h3 id="文字加粗"><a href="#文字加粗" class="headerlink" title="文字加粗"></a>文字加粗</h3><ul><li>使用 <code>**加粗**</code> 来表示这里是要 <strong>加粗</strong> 的文字</li><li>使用 <code>__加粗__</code> 来表示这里是要 <strong>加粗</strong> 的文字</li><li>使用 html 标签 <code>&lt;b&gt;加粗&lt;/b&gt;</code>, 来表示要<b>加粗</b>的文字</li></ul><h3 id="文字倾斜"><a href="#文字倾斜" class="headerlink" title="文字倾斜"></a>文字倾斜</h3><ul><li>使用 <code>_倾斜_</code> 来表示这里是要 <em>倾斜</em> 的文字</li><li>使用 <code>*倾斜*</code> 来表示这里是要 <em>倾斜</em> 的文字</li><li>使用 html 标签 <code>&lt;i&gt;倾斜&lt;/i&gt;</code>, 来表示要<i>倾斜</i>的文字</li></ul><h3 id="文字上标和下标"><a href="#文字上标和下标" class="headerlink" title="文字上标和下标"></a>文字上标和下标</h3><ul><li>上标：<code>2&lt;sup&gt;2&lt;/sup&gt; = 4</code> –&gt; 2<sup>2</sup> &#x3D; 4</li><li>下标：<code>log&lt;sub&gt;2&lt;/sub&gt;</code> –&gt; log<sub>2</sub></li></ul><blockquote><p>这里可以这样记忆， sup 大头在上，表示上标 sub 大头在下表示下标</p></blockquote><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>使用<code>---</code> 来表示</p><h3 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">---</span><br></pre></td></tr></table></figure><h3 id="效果-2"><a href="#效果-2" class="headerlink" title="效果"></a>效果</h3><hr><h2 id="TODO-待办事项"><a href="#TODO-待办事项" class="headerlink" title="TODO 待办事项"></a>TODO 待办事项</h2><p>markdown 也是可以作为简单的待办事项来进行记录，具体写法如下</p><blockquote><p>大概就是在无序列表中见添加一个 <code>[]</code> ，其中内容为 <code>x</code> 时代表已完成状态，为 空格 时代表未完成</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> [x] 吃饭</span><br><span class="line"><span class="bullet">-</span> [x] 睡觉</span><br><span class="line"><span class="bullet">-</span> [x] 刷 B 站</span><br><span class="line"><span class="bullet">-</span> [ ] 学习</span><br></pre></td></tr></table></figure><ul><li><input checked="" disabled="" type="checkbox"> 吃饭</li><li><input checked="" disabled="" type="checkbox"> 睡觉</li><li><input checked="" disabled="" type="checkbox"> 刷 B 站</li><li><input disabled="" type="checkbox"> 学习</li></ul><blockquote><p>当然，markdown 也可以进行一些数学公式、流程图、甘特图的展示。</p></blockquote><h2 id="一些好用的-markdown-编辑器推介"><a href="#一些好用的-markdown-编辑器推介" class="headerlink" title="一些好用的 markdown 编辑器推介"></a>一些好用的 markdown 编辑器推介</h2><ol><li><p>最好用的莫过于 <code>typora</code> 这款软件了。它的特色就是你可以实时预览出你写的 markdown 文章。现在最新版 <code>typora</code> 是付费产品。</p></li><li><p>我现在使用的最多的就是 <code>vs code</code> 了，这是微软推出的一款开源免费的编辑器。这个编辑器也可以进行实时预览。</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;这篇文章大概将常用的 markdown 基础语法进行了一下整理&lt;/p&gt;</summary>
    
    
    
    <category term="markdown" scheme="http://blog.whbbit.cn/blog/categories/markdown/"/>
    
    
    <category term="markdown" scheme="http://blog.whbbit.cn/blog/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript字符串操作的方法</title>
    <link href="http://blog.whbbit.cn/2021/03/31/blog/2021-03-31-18-27-js-string/"/>
    <id>http://blog.whbbit.cn/2021/03/31/blog/2021-03-31-18-27-js-string/</id>
    <published>2021-03-31T10:28:09.000Z</published>
    <updated>2021-03-31T10:28:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>字符串的方法总览</p><span id="more"></span><h2 id="如何声明字符串"><a href="#如何声明字符串" class="headerlink" title="如何声明字符串"></a>如何声明字符串</h2><ol><li>字面量声明<br>使用’’ 或 “”</li><li>构造函数<br>new String()</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;hello world!&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> o_str = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&quot;hello world!&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="如何给字符串赋值"><a href="#如何给字符串赋值" class="headerlink" title="如何给字符串赋值"></a>如何给字符串赋值</h2><ol><li>初始化</li><li>先声明，后赋值</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> srting;</span><br><span class="line">string = <span class="string">&quot;world&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="字符串的属性"><a href="#字符串的属性" class="headerlink" title="字符串的属性"></a>字符串的属性</h2><p>length 长度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">str.length();</span><br></pre></td></tr></table></figure><h2 id="字符串的方法"><a href="#字符串的方法" class="headerlink" title="字符串的方法"></a>字符串的方法</h2><h3 id="查（查找字符串）"><a href="#查（查找字符串）" class="headerlink" title="查（查找字符串）"></a>查（查找字符串）</h3><ol><li>indexOf(‘字符串’,从哪里开始向右找)</li><li>lastIndexOf(‘字符串’,从哪里开始向左找)</li><li>charAt(下标)： 根据下标查找字符</li><li>charCodeAt(下标)：根据下标查找字符编码值</li></ol><h3 id="替（字符串替换）"><a href="#替（字符串替换）" class="headerlink" title="替（字符串替换）"></a>替（字符串替换）</h3><p>replace(‘旧串’,’新串’)</p><blockquote><p>只能替换一次</p></blockquote><h3 id="截（字符串截取）"><a href="#截（字符串截取）" class="headerlink" title="截（字符串截取）"></a>截（字符串截取）</h3><p>substring(start,end)：截取指定范围的字符串，支持参数互换，不支持负数<br>substr(start,length)：截取指定长度的字符串<br>slice(start,end)：截取指定范围内的字符串，不支持参数互换，支持负数</p><h3 id="转（字符串转换）"><a href="#转（字符串转换）" class="headerlink" title="转（字符串转换）"></a>转（字符串转换）</h3><p>toUpperCase(‘字符串’)：将小写祖母转换为大写字母</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> string = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> UpperString = string.toUpperCase(string); <span class="comment">// =&gt; &#x27;HELLO WORLD&#x27;</span></span><br></pre></td></tr></table></figure><p>toLowerCase(‘字符串’)：将大写字母转换为小写字母</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> string = <span class="string">&quot;hellO world&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> UpperString = string.toLowerCase(string); <span class="comment">// =&gt; &#x27;hello world&#x27;</span></span><br></pre></td></tr></table></figure><p>split(‘切割符’,长度)： 字符串转换为数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> string = <span class="string">&quot;vuejs,go,nodejs,react&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> string_arr = string.split(<span class="string">&quot;,&quot;</span>); <span class="comment">// =&gt; [vuejs,go,nodejs,react]</span></span><br></pre></td></tr></table></figure><h2 id="翻转字符串"><a href="#翻转字符串" class="headerlink" title="翻转字符串"></a>翻转字符串</h2><p>可以先将字符串转换为数组进行翻转再转回字符串，具体操作如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> string = <span class="string">&quot;dlrow olleh&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> reverseString = string.split(<span class="string">&quot;&quot;</span>).reverse().join(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="comment">// reverseString =&gt; hello world</span></span><br></pre></td></tr></table></figure><h2 id="静态（类）方法"><a href="#静态（类）方法" class="headerlink" title="静态（类）方法"></a>静态（类）方法</h2><p>String.fromCharCode(编码)；将编码转为指定的字符</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;字符串的方法总览&lt;/p&gt;</summary>
    
    
    
    
    <category term="javascript" scheme="http://blog.whbbit.cn/blog/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>前端路由和后端路由的区别</title>
    <link href="http://blog.whbbit.cn/2021/03/28/blog/20210328-12-40-router/"/>
    <id>http://blog.whbbit.cn/2021/03/28/blog/20210328-12-40-router/</id>
    <published>2021-03-28T04:40:37.000Z</published>
    <updated>2021-03-28T04:40:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>前端路由和后端路由的区别</p><span id="more"></span><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p>路由是根据不同的<code>url</code>地址展示不同的内容或页面</p><h3 id="前端路由"><a href="#前端路由" class="headerlink" title="前端路由"></a>前端路由</h3><p>前端路由很重要的一点是页面不刷新，前端路由就是把不同的路由对应不同的内容或页面的人物交给前端来做。每跳转到不同<code>url</code>都是使用前端的锚点路由，随着单页应用的不断普及，前后点开发的分离，目前项目基本都是使用前端路由，在项目使用期间页面不会重新加载。<code>hash</code> 有一个特点：<code>http</code> 请求不会包含 <code>hash</code> 相关的内容；所以单页应用的页面跳转主要使用 <code>hash</code> 来实现。</p><h3 id="后端路由"><a href="#后端路由" class="headerlink" title="后端路由"></a>后端路由</h3><p>通过用户请求的 <code>url</code> 导航到具体的 <code>HTML</code> 页面，每跳转到不同的 <code>url</code>，都是重新访问服务器，然后服务器端返回页面，页面也是从服务器端获取数据，然后和模板组合，返回 <code>HTML</code>；或者也可以是返回 <code>HTML</code> 模板，然后有 <code>js</code> 请求数据，使用前端模板和数据进行组合，生成想要的 <code>HTML</code>。</p><h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><ol><li>从性能和用户体验的层面来比较的话，后端路由每次访问一个新页面的时候都要向服务器发起请求，然后服务器再响应请求，这个过程肯定会有延迟。而前端路由在访问一个新页面时仅仅是变换了路径，没有网络延迟，对于用户体验有较大提升。</li><li>在某些场合，使用 ajax 请求数据，可以让页面无刷新，页面变化了 url 没有发生变化，用户就不能复制相应的地址，用前端路由做单页面的网页就可以很好的解决这个问题。但是前端路由受用浏览器的前进，后退键时会重新发起请求，没有合理的利用缓存。</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;前端路由和后端路由的区别&lt;/p&gt;</summary>
    
    
    
    
    <category term="路由" scheme="http://blog.whbbit.cn/blog/tags/%E8%B7%AF%E7%94%B1/"/>
    
  </entry>
  
  <entry>
    <title>前后端渲染的优缺点</title>
    <link href="http://blog.whbbit.cn/2021/03/28/blog/20210328-11-22-rendering/"/>
    <id>http://blog.whbbit.cn/2021/03/28/blog/20210328-11-22-rendering/</id>
    <published>2021-03-28T03:23:53.000Z</published>
    <updated>2021-03-28T03:23:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>前后端渲染的各自的优缺点</p><span id="more"></span><h2 id="前端渲染"><a href="#前端渲染" class="headerlink" title="前端渲染"></a>前端渲染</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>后端返回<code>JSON</code>数据，前端利用预先写好的<code>HTML</code>模板，循环读取<code>JSON</code>数据，拼接字符串，并插入页面中。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>前后端分离。前端专注于前端<code>UI</code>，后端专注于<code>api</code>的开发，且前端有更多的选择性，而不需要后端的特性的模板。</li><li>体验更好。可以将网站做成<code>SPA</code>或者部分内容做成<code>SPA</code>，尤其是移动端，这样做更加接近原生 app 的体验。</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>前端响应慢。如果是客户端渲染，前端还要进行字符串的拼接过程，需要耗费额外的时间，不如服务端渲染响应快。</li><li>不利于 seo。目前来说百度和谷歌的爬虫对于 spa 页面的爬取是有问题的。因为服务器端没有保存完整的 HTML，而是通过 js 进行 dom 拼接，这样爬虫无法爬取信息。导致 seo 很差劲。</li></ol><h2 id="后端渲染"><a href="#后端渲染" class="headerlink" title="后端渲染"></a>后端渲染</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>前端请求，后端利用后台模板引擎直接生成 HTML，前端接收到数据后，直接插入页面即可。</p><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><ol><li>前端耗时少，减少首屏加载时间。</li><li>有利于 seo。因为后端有完整的 HTML 页面，所以爬虫可以获取更多信息。</li><li>无需占用客户端资源。解析模板的工作完全交由后端来做，客户端只需要解析标准的 HTML 页面即可，这样对于客户端的资源占用更少。对于移动端来说就是耗电量的减少。</li><li>后端生成静态文件。可以进行缓存，减少接口的请求和数据库的查询。对于数据变化不大的页面尤其明显。</li></ol><h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><ol><li>不利于前后端分离，开发效率低。</li><li>占用服务器资源。</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;前后端渲染的各自的优缺点&lt;/p&gt;</summary>
    
    
    
    
    <category term="seo" scheme="http://blog.whbbit.cn/blog/tags/seo/"/>
    
  </entry>
  
  <entry>
    <title>判断一个变量是否为数组</title>
    <link href="http://blog.whbbit.cn/2021/03/24/blog/20210321-20-13-variable-is-a-Array/"/>
    <id>http://blog.whbbit.cn/2021/03/24/blog/20210321-20-13-variable-is-a-Array/</id>
    <published>2021-03-24T12:13:43.000Z</published>
    <updated>2021-03-24T12:13:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>判断一个变量是否是数组</p><span id="more"></span><ol><li>Array.isArray()<br>返回 true 就是数组<br>原理:</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.isArray = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(value) === <span class="string">&#x27;[object Array]&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>indtanceof Array<br>返回 true，就是数组</p></li><li><p>Object.prototype.toString.call()<br>如果值是[object Array]，就是数组</p></li><li><p>constructor<br>如果是数组，<code>arr.constructor === Array</code>，这种方法并不是很准确(可以指定 <code>obj.constructor === Array</code>)</p><blockquote><p>arr 是这个变量</p></blockquote></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;判断一个变量是否是数组&lt;/p&gt;</summary>
    
    
    
    
    <category term="js" scheme="http://blog.whbbit.cn/blog/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>使用css画三角形</title>
    <link href="http://blog.whbbit.cn/2021/03/24/blog/20210324-20-05-css-triangle/"/>
    <id>http://blog.whbbit.cn/2021/03/24/blog/20210324-20-05-css-triangle/</id>
    <published>2021-03-24T12:06:31.000Z</published>
    <updated>2021-03-24T12:06:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用 css 画三角形</p><span id="more"></span><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;css-triangle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.css-triangle</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid transparent;</span><br><span class="line">  <span class="attribute">border-top</span>: <span class="number">5px</span> solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>宽高要设置为 <code>0px</code> 才能出现三角形，不然的话就变成梯形了。<br>想要向上的三角形就设置<code>border-bottom</code><br>想要向下的三角形就设置<code>border-top</code><br>想要向左的三角形就设置<code>border-right</code><br>想要向右的三角形就设置<code>border-left</code></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用 css 画三角形&lt;/p&gt;</summary>
    
    
    
    
    <category term="css" scheme="http://blog.whbbit.cn/blog/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>使用nest的子项目模式搭建服务端</title>
    <link href="http://blog.whbbit.cn/2021/03/17/blog/20210317-13-05-nestjs/"/>
    <id>http://blog.whbbit.cn/2021/03/17/blog/20210317-13-05-nestjs/</id>
    <published>2021-03-17T05:06:06.000Z</published>
    <updated>2021-03-17T05:06:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用 nest.js 的单体仓库模式（monorepo mode）来搭建 node 后台项目</p><span id="more"></span><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nest new server</span><br></pre></td></tr></table></figure><blockquote><p>默认创建标准模式（standard mode）适用于单个的服务端项目</p></blockquote><p>使用同一数据库，数据模型一致时，要想给后台管理端和 web 端调用不同的接口，只是返回不同的数据。可以使用单体仓库模式（monorepo mode）</p><blockquote><p>使用 nest 的单体仓库模式（monorepo mode） <a href="https://docs.nestjs.com/cli/monorepo">原文地址</a></p></blockquote><h2 id="切换为单体仓库模式"><a href="#切换为单体仓库模式" class="headerlink" title="切换为单体仓库模式"></a>切换为单体仓库模式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> server</span><br><span class="line"><span class="comment"># 在server中创建一个名为admin的子项目</span></span><br><span class="line">nest g app admin</span><br></pre></td></tr></table></figure><h2 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h2><blockquote><p>切换为单体仓库模式后，使用<code>nest start 仓库名</code>来启动项目<br><code>-w</code> 代表监听变化，在开发中使用可以自动监听变化刷新</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nest start -w admin</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用 nest.js 的单体仓库模式（monorepo mode）来搭建 node 后台项目&lt;/p&gt;</summary>
    
    
    
    <category term="node.js" scheme="http://blog.whbbit.cn/blog/categories/node-js/"/>
    
    
    <category term="node.js" scheme="http://blog.whbbit.cn/blog/tags/node-js/"/>
    
    <category term="nest.js" scheme="http://blog.whbbit.cn/blog/tags/nest-js/"/>
    
    <category term="node框架" scheme="http://blog.whbbit.cn/blog/tags/node%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>生成项目结构</title>
    <link href="http://blog.whbbit.cn/2021/03/15/blog/20210315-13-49-show-demo-tree/"/>
    <id>http://blog.whbbit.cn/2021/03/15/blog/20210315-13-49-show-demo-tree/</id>
    <published>2021-03-15T05:50:05.000Z</published>
    <updated>2021-03-15T05:50:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>在Windows下生成某个目录下的项目结构</p><span id="more"></span><ol><li>打开命令窗口</li><li>进入指定目录</li><li>输入 <code>tree &gt; xxx.txt</code></li></ol><blockquote><p>xxx.txt表示生成的目录结构存放的文件</p></blockquote><p>显示项目结构</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tree &gt; tree.txt</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;在Windows下生成某个目录下的项目结构&lt;/p&gt;</summary>
    
    
    
    <category term="Windows" scheme="http://blog.whbbit.cn/blog/categories/windows/"/>
    
    
    <category term="小技巧" scheme="http://blog.whbbit.cn/blog/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>tailwindcss学习笔记</title>
    <link href="http://blog.whbbit.cn/2021/03/10/blog/2021-03-10-22-02-tailwindcss/"/>
    <id>http://blog.whbbit.cn/2021/03/10/blog/2021-03-10-22-02-tailwindcss/</id>
    <published>2021-03-10T14:02:43.000Z</published>
    <updated>2021-03-10T14:02:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>tailwind 好像很流行的样子，但是中文材料有些少，这里学习总结一下。</p><span id="more"></span><blockquote><p><strong>本文参考<code>小马视频</code>教程，<a href="https://github.com/komavideo/LearnTailwindCSS">原文 GitHub 地址</a></strong> ,这里根据现有条件进行了些许改造</p></blockquote><h2 id="初识-tailwind"><a href="#初识-tailwind" class="headerlink" title="初识 tailwind"></a>初识 tailwind</h2><h3 id="创建项目目录并初始化"><a href="#创建项目目录并初始化" class="headerlink" title="创建项目目录并初始化"></a>创建项目目录并初始化</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir tailwindcss</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> tailwindcss</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm init -y</span></span><br></pre></td></tr></table></figure><h3 id="建立一个可定制的-css-样式单"><a href="#建立一个可定制的-css-样式单" class="headerlink" title="建立一个可定制的 css 样式单"></a>建立一个可定制的 css 样式单</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ midir src</span><br><span class="line"></span><br><span class="line">$ nano src/mytailwind.css</span><br></pre></td></tr></table></figure><p>mytailwind.css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@tailwind</span> base;</span><br><span class="line"><span class="keyword">@tailwind</span> components;</span><br><span class="line"><span class="keyword">@tailwind</span> utilities;</span><br></pre></td></tr></table></figure><h3 id="生成配置文件"><a href="#生成配置文件" class="headerlink" title="生成配置文件"></a>生成配置文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npx tailwindcss-cli@latest init</span></span><br></pre></td></tr></table></figure><blockquote><p>tailwind.config.js</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">purge</span>: [<span class="string">&#x27;./**/*.html&#x27;</span>],</span><br><span class="line">  <span class="attr">darkMode</span>: <span class="literal">false</span>, <span class="comment">// or &#x27;media&#x27; or &#x27;class&#x27;</span></span><br><span class="line">  <span class="attr">theme</span>: &#123;</span><br><span class="line">    <span class="attr">extend</span>: &#123;&#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">variants</span>: &#123;</span><br><span class="line">    <span class="attr">extend</span>: &#123;&#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>purge: [&quot;./**/*.html&quot;]</code>这个配置相当于按需打包，只将使用到的 css 指令打包</p></blockquote><h3 id="编写测试文件"><a href="#编写测试文件" class="headerlink" title="编写测试文件"></a>编写测试文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nano index.html</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;./css/tailwind.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text-gray-600&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">&quot;mb-5&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bg-gray-700 p-4 text-white&quot;</span>&gt;</span>Helo world.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">main</span> <span class="attr">class</span>=<span class="string">&quot;container mx-auto&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text-center text-5xl&quot;</span>&gt;</span>我的内容我做主！<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span> <span class="attr">class</span>=<span class="string">&quot;my-5&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex justify-center&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://raw.githubusercontent.com/komavideo/LearnTailwindCSS/main/tailwindcss.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;shadow-lg border my-5&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">&quot;mt-5&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bg-gray-300 p-4 text-black&quot;</span>&gt;</span>你好，Tailwind CSS。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="产品模式编译"><a href="#产品模式编译" class="headerlink" title="产品模式编译"></a>产品模式编译</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx tailwindcss-cli@latest build ./src/mytailwind.css -o ./css/tailwind.css</span><br></pre></td></tr></table></figure><h3 id="开启本地服务，测试结果"><a href="#开启本地服务，测试结果" class="headerlink" title="开启本地服务，测试结果"></a>开启本地服务，测试结果</h3><p>这里使用<code>vscode</code>的<code>Live server</code>插件启动本地服务。</p><p>测试结果如下图所示<br><img src="https://whbbit-picture.oss-cn-beijing.aliyuncs.com/img/20210310222945.jpeg" alt="测试结果"></p><h2 id="tailwind-css-导入方式-Nuxt-js"><a href="#tailwind-css-导入方式-Nuxt-js" class="headerlink" title="tailwind css 导入方式 - Nuxt.js"></a>tailwind css 导入方式 - Nuxt.js</h2><h3 id="官网地址"><a href="#官网地址" class="headerlink" title="官网地址"></a>官网地址</h3><p><a href="https://tailwindcss.com/docs/guides/nuxtjs">https://tailwindcss.com/docs/guides/nuxtjs</a></p><h3 id="新建工程"><a href="#新建工程" class="headerlink" title="新建工程"></a>新建工程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npx create-nuxt-app tailwindcss-nuxt</span><br><span class="line">$ <span class="built_in">cd</span> tailwindcss-nuxt</span><br></pre></td></tr></table></figure><h3 id="安装-tailwindcss"><a href="#安装-tailwindcss" class="headerlink" title="安装 tailwindcss"></a>安装 tailwindcss</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -D @nuxtjs/tailwindcss tailwindcss@npm:@tailwindcss/postcss7-compat @tailwindcss/postcss7-compat postcss@^7 autoprefixer@^9</span><br></pre></td></tr></table></figure><h3 id="修改nuxt-config-js文件"><a href="#修改nuxt-config-js文件" class="headerlink" title="修改nuxt.config.js文件"></a>修改<code>nuxt.config.js</code>文件</h3><blockquote><p>在<code>nuxt.config.js</code>文件中的<code>buildModules</code>配置项中添加<code>@nuxtjs/tailwindcss</code>模块</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//nuxt.config.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">buildModules</span>: [<span class="string">&#x27;@nuxtjs/tailwindcss&#x27;</span>],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="生成tailwind-config-js"><a href="#生成tailwind-config-js" class="headerlink" title="生成tailwind.config.js"></a>生成<code>tailwind.config.js</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx tailwindcss init</span><br></pre></td></tr></table></figure><p>运行后，会创建一个<code>tailwind.config.js</code>文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tailwind.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">purge</span>: [],</span><br><span class="line">  <span class="attr">darkMode</span>: <span class="literal">false</span>, <span class="comment">// or &#x27;media&#x27; or &#x27;class&#x27;</span></span><br><span class="line">  <span class="attr">theme</span>: &#123;</span><br><span class="line">    <span class="attr">extend</span>: &#123;&#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">variants</span>: &#123;</span><br><span class="line">    <span class="attr">extend</span>: &#123;&#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将 <code>purge</code>一项改为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">purge: [</span><br><span class="line">    <span class="string">&#x27;./components/**/*.&#123;vue,js&#125;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;./layouts/**/*.vue&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;./pages/**/*.vue&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;./plugins/**/*.&#123;js,ts&#125;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;./nuxt.config.&#123;js,ts&#125;&#x27;</span>,</span><br><span class="line">  ],</span><br></pre></td></tr></table></figure><blockquote><p>theme 部分是你定义你的调色板，字体，字体比例，边框大小，断点-任何与你的网站视觉设计有关的东西</p></blockquote><h3 id="在项目中引入tailwindcss"><a href="#在项目中引入tailwindcss" class="headerlink" title="在项目中引入tailwindcss"></a>在项目中引入<code>tailwindcss</code></h3><p>在<code>./asstes/css/tailwind.css</code>中添加</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@tailwind</span> base;</span><br><span class="line"><span class="keyword">@tailwind</span> components;</span><br><span class="line"><span class="keyword">@tailwind</span> utilities;</span><br></pre></td></tr></table></figure><blockquote><p>这样就完成了 nuxt 项目中的 tailwind 引入和配置</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;tailwind 好像很流行的样子，但是中文材料有些少，这里学习总结一下。&lt;/p&gt;</summary>
    
    
    
    <category term="css" scheme="http://blog.whbbit.cn/blog/categories/css/"/>
    
    <category term="css框架" scheme="http://blog.whbbit.cn/blog/categories/css/css%E6%A1%86%E6%9E%B6/"/>
    
    <category term="tailwindcss" scheme="http://blog.whbbit.cn/blog/categories/css/css%E6%A1%86%E6%9E%B6/tailwindcss/"/>
    
    
    <category term="css" scheme="http://blog.whbbit.cn/blog/tags/css/"/>
    
    <category term="css框架" scheme="http://blog.whbbit.cn/blog/tags/css%E6%A1%86%E6%9E%B6/"/>
    
    <category term="tailwindcss" scheme="http://blog.whbbit.cn/blog/tags/tailwindcss/"/>
    
  </entry>
  
  <entry>
    <title>修改input placeholder的颜色</title>
    <link href="http://blog.whbbit.cn/2021/03/09/blog/2021-03-09-23-04-placeholder/"/>
    <id>http://blog.whbbit.cn/2021/03/09/blog/2021-03-09-23-04-placeholder/</id>
    <published>2021-03-09T15:04:58.000Z</published>
    <updated>2021-03-09T15:04:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天用到了修改 input 的 placeholder 效果，以前没怎么注意到，今天就总结一下。</p><span id="more"></span><blockquote><p>placeholder 需要注意浏览器的兼容性</p></blockquote><blockquote><p>使用 webkit 内核的浏览器 <code>::-webkit-input-placeholder</code><br>Firefox 4-18 版本 <code>:-moz-placeholder</code><br>Firefox 19+ 版本 <code>::-moz-placeholder</code><br>IE 浏览器 <code>:ms-placeholder</code></p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span>::-webkit-input-placeholder &#123;</span><br><span class="line">  color: <span class="number">#34465d</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span>:-moz-placeholder &#123;</span><br><span class="line">  color: <span class="number">#34465d</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span>::-moz-placeholder &#123;</span><br><span class="line">  color: <span class="number">#34465d</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span>:-ms-input-placeholder &#123;</span><br><span class="line">  color: <span class="number">#34465d</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天用到了修改 input 的 placeholder 效果，以前没怎么注意到，今天就总结一下。&lt;/p&gt;</summary>
    
    
    
    <category term="学习笔记" scheme="http://blog.whbbit.cn/blog/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="html" scheme="http://blog.whbbit.cn/blog/tags/html/"/>
    
    <category term="css" scheme="http://blog.whbbit.cn/blog/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>Ajax的基础封装</title>
    <link href="http://blog.whbbit.cn/2021/03/02/blog/2021-03-02-Ajax/"/>
    <id>http://blog.whbbit.cn/2021/03/02/blog/2021-03-02-Ajax/</id>
    <published>2021-03-01T23:50:33.000Z</published>
    <updated>2021-03-01T23:50:33.000Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="Ajax-优缺点"><a href="#Ajax-优缺点" class="headerlink" title="Ajax 优缺点"></a>Ajax 优缺点</h2><ul><li>优点<ol><li>无刷新实现页面局部更新</li><li>减轻服务器压力</li></ol></li><li>缺点<ol><li>破坏了浏览器的前进后退机制（Ajax 的自动更新机制）</li><li>单页面 Ajax 请求太多，会导致页面加载缓慢</li><li>搜索引擎支持不是很好</li><li>安全性不是很好（能使用数据加密解决）</li></ol></li></ul><blockquote><p>使用 Ajax 必须要有后端的支持</p></blockquote><h2 id="Ajax-原理"><a href="#Ajax-原理" class="headerlink" title="Ajax 原理"></a>Ajax 原理</h2><ol><li>首先创建一个 <code>XMLHttpRequest</code>对象，然后通过这个对象的<code>open</code>方法与服务器建立连接，将通过<code>send</code>方法将请求发送给后端，最后通过一个事件来监听后端相应的状态及数据，后端通过回调函数将数据返回到前端</li></ol><blockquote><p>使用 Ajax 需要注意的问题</p><ol><li>乱码问题，一定要检查外部文件与页面字符集是否一致</li><li>缓存问题，可以使用时间戳来解决</li></ol></blockquote><h2 id="Ajax-的使用"><a href="#Ajax-的使用" class="headerlink" title="Ajax 的使用"></a>Ajax 的使用</h2><blockquote><p>使用 Ajax 有 4 个步骤</p></blockquote><ol><li>创建 Ajax</li><li>连接服务器</li><li>发送请求</li><li>接收返回值</li></ol><h3 id="1-创建-Ajax"><a href="#1-创建-Ajax" class="headerlink" title="1. 创建 Ajax"></a>1. 创建 Ajax</h3><p>创建 Ajax 需要考虑浏览器的兼容性</p><blockquote><p>IE6 以上 <code>new XMLHttpRequest()</code><br>IE6 <code>new ActiveXObject(&#39;Microsoft.XMLHTTP&#39;)</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xhr = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;</span><br><span class="line">  xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-连接服务器"><a href="#2-连接服务器" class="headerlink" title="2. 连接服务器"></a>2. 连接服务器</h3><p>上面创建的 Ajax 对象<code>xhr</code>，使用<code>xhr.open(&#39;请求方式GET / POST&#39; , URL路径, &#39;异步/同步&#39;)</code></p><blockquote><p>第三个参数 <code>true</code>为异步，<code>false</code>为同步</p></blockquote><ul><li>当请求方式为 POST 时，代码写法为：<ul><li><code>xhr.open(&#39;post&#39;, url, true)</code></li></ul></li><li>当请求方式为 GET 时，代码写法为：<ul><li><code>xhr.open(&#39;get&#39;, url, true)</code></li></ul></li></ul><h3 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h3><p>使用<code>xhr.send()</code>发送请求<br>当请求方式为 GET 时，发送请求为<code>xhr.send()</code><br>当请求方式为 POST 时，发送请求为 <code>xhr.send(数据)</code></p><blockquote><p>使用 post 请求时必须在<code>xhr.send(数据)</code>上面添加 <code>xhr.setRequestHeader(&#39;Content-type&#39;,&#39;Application/x-www-form-urlencoded;chartset=utf-8&#39;)</code></p></blockquote><h3 id="接收返回值"><a href="#接收返回值" class="headerlink" title="接收返回值"></a>接收返回值</h3><p>使用 Ajax 要调用一个 <code>readystatechange</code>事件，当请求被发送到服务器时，我们需要执行一些基于响应的操作。当<code>readystatechange</code>改变的时候，就会触发这个事件执行。</p><h4 id="readyState-请求的状态，返回的状态码-0-4"><a href="#readyState-请求的状态，返回的状态码-0-4" class="headerlink" title="readyState : 请求的状态，返回的状态码(0-4)"></a>readyState : 请求的状态，返回的状态码(0-4)</h4><ul><li>0: 未初始化，open 还没有调用</li><li>1: 载入，已经调用了 send()正在发送请求</li><li>2: 载入完成，send 方法已经完成了，已经收到了全部的响应内容</li><li>3: 解析，正在解析响应内容</li><li>4: 完成，响应内容解析完成，可以在客户端调用了</li></ul><h4 id="responseText-返回请求的内容"><a href="#responseText-返回请求的内容" class="headerlink" title="responseText: 返回请求的内容"></a>responseText: 返回请求的内容</h4><h4 id="status-返回请求的结果码"><a href="#status-返回请求的结果码" class="headerlink" title="status: 返回请求的结果码"></a>status: 返回请求的结果码</h4><ul><li>200：成功</li><li>404：未找到</li><li>5**：服务器错误</li></ul><h2 id="Ajax-的简单封装"><a href="#Ajax-的简单封装" class="headerlink" title="Ajax 的简单封装"></a>Ajax 的简单封装</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Ajax = &#123;</span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params">url, fn</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    xhr.open(<span class="string">&quot;get&quot;</span>, url, <span class="literal">true</span>);</span><br><span class="line">    xhr.send();</span><br><span class="line">    xhr.onreadystatechange = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (xhr.status === <span class="number">200</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (fn <span class="keyword">instanceof</span> <span class="built_in">Function</span>) &#123;</span><br><span class="line">            fn(xhr.responseText);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">post</span>(<span class="params">url, data, fn</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    xhr.open(<span class="string">&quot;post&quot;</span>, url, <span class="literal">true</span>);</span><br><span class="line">    xhr.setRequestHeader(</span><br><span class="line">      <span class="string">&quot;Content-type&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Application/x-www-form-urlencoded;charset=utf-8&quot;</span></span><br><span class="line">    );</span><br><span class="line">    xhr.send(data);</span><br><span class="line">    xhr.onreadystatechange = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (xhr.status === <span class="number">200</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (fn <span class="keyword">instanceof</span> <span class="built_in">Function</span>) &#123;</span><br><span class="line">            fn(xhr.responseText);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h2 id=&quot;Ajax-优缺点&quot;&gt;&lt;a href=&quot;#Ajax-优缺点&quot; class=&quot;headerlink&quot; title=&quot;Ajax 优缺点&quot;&gt;&lt;/a&gt;Ajax 优缺点&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;优点&lt;ol&gt;
&lt;li&gt;无刷新实</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://blog.whbbit.cn/blog/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Ajax" scheme="http://blog.whbbit.cn/blog/tags/ajax/"/>
    
    <category term="javascript" scheme="http://blog.whbbit.cn/blog/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>React基础和自定义hooks</title>
    <link href="http://blog.whbbit.cn/2021/03/01/blog/2021-03-01-ReactBase/"/>
    <id>http://blog.whbbit.cn/2021/03/01/blog/2021-03-01-ReactBase/</id>
    <published>2021-03-01T13:24:43.000Z</published>
    <updated>2021-03-01T13:24:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>这两天在看峰华大佬的 react 教程，顺便做点笔记来加深一下印象。</p><span id="more"></span><h2 id="React-属性-props"><a href="#React-属性-props" class="headerlink" title="React 属性 props"></a>React 属性 props</h2><p>React 自定义组件接收一个 props 对象，可以用解构语法来进行接收</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Button.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Button</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>&#123;props.label&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/*使用解构语法</span></span><br><span class="line"><span class="comment">  function Button(&#123;label&#125;) &#123;</span></span><br><span class="line"><span class="comment">    return &lt;button&gt;&#123;label&#125;&lt;/button&gt;;</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Button;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Button <span class="keyword">from</span> <span class="string">&#x27;./Button&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="function"><span class="title">index</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Button</span> <span class="attr">label</span>=<span class="string">&quot;按钮&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> index</span><br></pre></td></tr></table></figure><h3 id="children-属性"><a href="#children-属性" class="headerlink" title="children 属性"></a>children 属性</h3><p>还有一个内置的<code>children</code>属性，来代表开始或结束标签中的任何内容</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Button.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Button</span>(<span class="params">&#123;label, children&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span>&gt;</span>&#123;label&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      &#123;children&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Button;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Button <span class="keyword">from</span> <span class="string">&#x27;./Button&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="function"><span class="title">index</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Button</span> <span class="attr">label</span>=<span class="string">&quot;按钮&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>这里是children传递的值<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> index</span><br></pre></td></tr></table></figure><h2 id="给组件注册事件监听"><a href="#给组件注册事件监听" class="headerlink" title="给组件注册事件监听"></a>给组件注册事件监听</h2><p>要想给不同的按钮注册不同的事件，这样就需要将事件处理函数放置于使用组件的父组件中，使用 props 将函数传递给子组件。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Button.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Button</span>(<span class="params">&#123;onClick,label, children&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;onClick&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span>&gt;</span>&#123;label&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      &#123;children&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Button;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Button <span class="keyword">from</span> <span class="string">&#x27;./Button&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="function"><span class="title">index</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> handleButton1Click = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;按钮1被点击了&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> handleButton2Click = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;按钮2被点击了&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Button</span> <span class="attr">label</span>=<span class="string">&quot;按钮&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;handleButton1Click&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>这里是children传递的值<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Button</span> <span class="attr">label</span>=<span class="string">&quot;按钮&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;handleButton2Click&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> index</span><br></pre></td></tr></table></figure><blockquote><p>props 是静态的，在组件渲染后修改 props 的值并不会引起组件的更新。如果想要组件通过某一值的变化来动态改变的化，就得使用状态 state</p></blockquote><h2 id="状态-state"><a href="#状态-state" class="headerlink" title="状态 state"></a>状态 state</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Button.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Button</span>(<span class="params">&#123;onClick,label, children&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;onClick&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span>&gt;</span>&#123;label&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      &#123;children&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Button;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> React,&#123;useState&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Button <span class="keyword">from</span> <span class="string">&#x27;./Button&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="function"><span class="title">index</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [color1, setColor1] = useState(<span class="string">&#x27;#00ff00&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> [color2, setColor2] = useState(<span class="string">&#x27;#ff0000&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> handleButton1Click = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;按钮1被点击了&#x27;</span>)</span><br><span class="line">    setColor1(<span class="string">&#x27;#ffff00&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> handleButton2Click = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;按钮2被点击了&#x27;</span>)</span><br><span class="line">    setColor2(<span class="string">&#x27;#ff00ff&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Button</span> <span class="attr">label</span>=<span class="string">&quot;按钮&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;handleButton1Click&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>这里是children传递的值<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Button</span> <span class="attr">label</span>=<span class="string">&quot;按钮&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;handleButton2Click&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&#123;color:</span> <span class="attr">color1</span>&#125;&gt;</span></span></span><br><span class="line"><span class="xml">        第一个按钮点击变换颜色</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&#123;color:</span> <span class="attr">color2</span>&#125;&gt;</span></span></span><br><span class="line"><span class="xml">        第二个按钮点击变换颜色</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> index</span><br></pre></td></tr></table></figure><blockquote><p>useState 接收一个参数，是状态的默认值，返回一个数组，数组第一个值是状态的值，第二个值是改变状态值的函数。</p></blockquote><h2 id="自定义-hooks"><a href="#自定义-hooks" class="headerlink" title="自定义 hooks"></a>自定义 hooks</h2><blockquote><p>hooks 是 react 中用来定义可复用的逻辑代码，除了 jsx 中的内容。其他逻辑代码都可以抽离成自定义的 hooks 来达到复用。</p></blockquote><h3 id="自定义-hooke-步骤"><a href="#自定义-hooke-步骤" class="headerlink" title="自定义 hooke 步骤"></a>自定义 hooke 步骤</h3><ol><li>新建一个 js 文件<blockquote><p>推荐以 use 开头，能更清除的说明它的用途</p></blockquote></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir useColorSwitch.js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// useColorSwitch.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useColorSwitch</span>(<span class="params">color1, color2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [color, setColor] = useState(color1);</span><br><span class="line">  <span class="keyword">const</span> handleButtonClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    setColor(color2);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> [color, handleButtonClick];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useColorSwitch;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Button <span class="keyword">from</span> <span class="string">&quot;./Button&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> useColorSwitch <span class="keyword">from</span> <span class="string">&quot;./useColorSwitch&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="keyword">const</span> [color1,handleButton1Click] = useColorSwitch(<span class="string">&#x27;#ff00ff&#x27;</span>,<span class="string">&#x27;#00ff00&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> [color1,handleButton1Click] = useColorSwitch(<span class="string">&#x27;#0000ff&#x27;</span>,<span class="string">&#x27;#00ffff&#x27;</span>)</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">Button</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">label</span>=<span class="string">&quot;按钮1&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">onClick</span>=<span class="string">&#123;handleButton1Click&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      &gt;</span><span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">Button</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">label</span>=<span class="string">&quot;按钮2&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">onClick</span>=<span class="string">&#123;handleButton2Click&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      &gt;</span><span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&#123;color:</span> <span class="attr">color1</span>&#125;&gt;</span>按钮1点击变色<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&#123;color:</span> <span class="attr">color2</span>&#125;&gt;</span>按钮2点击变色<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> index</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;这两天在看峰华大佬的 react 教程，顺便做点笔记来加深一下印象。&lt;/p&gt;</summary>
    
    
    
    <category term="学习笔记" scheme="http://blog.whbbit.cn/blog/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="react" scheme="http://blog.whbbit.cn/blog/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>ES6中的Object.keys()</title>
    <link href="http://blog.whbbit.cn/2021/02/25/blog/20210225/"/>
    <id>http://blog.whbbit.cn/2021/02/25/blog/20210225/</id>
    <published>2021-02-25T00:01:36.000Z</published>
    <updated>2021-02-25T00:01:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>这两天业务中用到了获取对象的键名来进行展示，所以总结了一下。</p><span id="more"></span><h2 id="ES6-Object-keys-中获取对象的键名："><a href="#ES6-Object-keys-中获取对象的键名：" class="headerlink" title="ES6 Object.keys() 中获取对象的键名："></a>ES6 Object.keys() 中获取对象的键名：</h2><ol><li>传入<code>对象</code>，返回属性名</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="string">&quot;01&quot;</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="string">&quot;02&quot;</span>,</span><br><span class="line">  <span class="attr">c</span>: <span class="string">&quot;03&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(obj)); <span class="comment">// [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]</span></span><br></pre></td></tr></table></figure><blockquote><p>返回所有属性名，排列顺序和 for…in 循环遍历该对象时返回的数组一致</p></blockquote><ol start="2"><li>传入 <code>字符串</code> 和 <code>数组</code> 返回索引</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;whbbit&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(name));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> nameArray = [<span class="string">&quot;whbbit&quot;</span>, <span class="string">&quot;mobbit&quot;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(nameArray));</span><br></pre></td></tr></table></figure><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><ol><li><p>Object.values() 是对键值的遍历</p><blockquote><p>Object.values()返回一个数组,成员的参数是对象自身的(不含继承的),所有可遍历的属性的键值</p></blockquote></li><li><p>Object.entries() 是对键值对的遍历</p><blockquote><p>Object.entries() 方法返回一个数组,成员是参数对象自身的(不含继承的)所有可遍历的属性的键值对</p></blockquote></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;这两天业务中用到了获取对象的键名来进行展示，所以总结了一下。&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="http://blog.whbbit.cn/blog/categories/javascript/"/>
    
    
    <category term="js" scheme="http://blog.whbbit.cn/blog/tags/js/"/>
    
    <category term="ES6" scheme="http://blog.whbbit.cn/blog/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>Restful接口分格规范</title>
    <link href="http://blog.whbbit.cn/2021/02/20/blog/restful-api/"/>
    <id>http://blog.whbbit.cn/2021/02/20/blog/restful-api/</id>
    <published>2021-02-20T00:34:25.000Z</published>
    <updated>2021-02-20T00:34:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>自己写的接口总是看起来不那么优雅，系统的学习了一下 Restful 接口规范。希望我写的接口不再那么混乱吧。</p><span id="more"></span><h2 id="URL-设计最佳实践"><a href="#URL-设计最佳实践" class="headerlink" title="URL 设计最佳实践"></a>URL 设计最佳实践</h2><h3 id="1-1-动词-宾语"><a href="#1-1-动词-宾语" class="headerlink" title="1.1 动词 + 宾语"></a>1.1 动词 + 宾语</h3><p>动词通常是五种 HTTP 方法，对应 CRUD 操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET: 读取数据(Read)</span><br><span class="line">POST: 新建数据(Create)</span><br><span class="line">PUT: 更新数据(Update)</span><br><span class="line">PATCH: 更新数据(Update)，部分更新</span><br><span class="line">DELETE: 删除数据(Delete)</span><br></pre></td></tr></table></figure><blockquote><table><thead><tr><th>请求方式</th><th>接口</th><th>作用</th></tr></thead><tbody><tr><td>GET</td><td>&#x2F;articles</td><td>获取文章列表</td></tr><tr><td>GET</td><td>&#x2F;articles&#x2F;:id</td><td>获取某个文章</td></tr><tr><td>POST</td><td>&#x2F;articles</td><td>新建文章</td></tr><tr><td>PUT</td><td>&#x2F;articles&#x2F;:id</td><td>更新某个文章</td></tr><tr><td>DELETE</td><td>&#x2F;articles&#x2F;:id</td><td>删除某个文章</td></tr></tbody></table></blockquote><h3 id="1-2-宾语必须是名词"><a href="#1-2-宾语必须是名词" class="headerlink" title="1.2 宾语必须是名词"></a>1.2 宾语必须是名词</h3><p>宾语就是 API 的 URL，是 HTTP 动词作用的对象。它应该是名词，不能是动词。例如： <code>/article</code> 这个 URL 就是正确的，而下面的 URL 不是名词，所以都是错误的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/getAllCars</span><br><span class="line">/createNewCar</span><br><span class="line">/deleteAllRedCars</span><br></pre></td></tr></table></figure><h3 id="1-3-复数-URL"><a href="#1-3-复数-URL" class="headerlink" title="1.3 复数 URL"></a>1.3 复数 URL</h3><p>既然 URL 是名词，那么该用复数还是单数呢？<br>这个没有统一的规定，但是常见的操作是读取一个集合，如 <code>GET /articles</code>读取所有文章，这里显然要用复数。<br>为了统一，都用复数 URL。如 <code>GET /articles/2</code> 要好于 <code>GET /article/2</code></p><h2 id="REST-的指导原则"><a href="#REST-的指导原则" class="headerlink" title="REST 的指导原则"></a>REST 的指导原则</h2><ol><li><strong>客户端-服务器</strong>：通过将用户接口问题与数据存储问题分开，我们通过简化服务器组件来提高多个平台的用户接口的可移植性并提高可伸缩性。</li><li><strong>无状态</strong>：从客户端到服务器的每个请求都必须包含理解请求所需的所有信息，并且不能利用服务器上任何存储的上下文。因此，会话状态完全保留在客户端上。</li><li><strong>可缓存</strong>：缓存约束要求将对请求的响应中的数据隐式或显示标记为可缓存或不可缓存。如果响应是可缓存的，则客户端缓存有权重用该响应数据以用于以后的等效请求。</li><li><strong>统一接口</strong>：通过将通用性的软件工程原理应用于组件接口，简化了整个系统架构，提高了交互的可见性。为了获得统一的接口，需要多个架构约束来指导组件的行为。REST 由四个接口约束定义：资源识别; 通过陈述来处理资源; 自我描述性的信息; 并且，超媒体作为应用程序状态的引擎。</li><li><strong>分层系统</strong>：分层系统风格允许通过约束组件行为来使体系结构由分层层组成，这样每个组件都不能“看到”超出与它们交互的直接层。</li><li><strong>按需编码（可选）</strong>：REST 允许通过以小程序或脚本的形式下载和执行代码来扩展客户端功能。这通过减少预先实现所需的功能数量来简化客户端。</li></ol><h2 id="PUT-和-POST-的区别"><a href="#PUT-和-POST-的区别" class="headerlink" title="PUT 和 POST 的区别"></a>PUT 和 POST 的区别</h2><blockquote><p>摘自 (RESTful API)[<a href="http://restful.p2hp.com/faqs/rest-put-vs-post]">http://restful.p2hp.com/faqs/rest-put-vs-post]</a></p></blockquote><h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><table><thead><tr><th>PUT</th><th>POST</th></tr></thead><tbody><tr><td>RFC-2616 明确提到 <code>PUT</code> 对所包含实体的方法请求存储在提供的 <code>Request-URI</code> 下。如果 Request-URI 引用已存在的资源 - 将发生更新操作，否则如果 Request-URI 是有效资源 URI（假设允许客户端确定资源标识符），则应该发生 create 操作。<code>PUT/questions/&#123;question-id&#125;</code></td><td>该<code>POST</code> 方法用于请求源服务器接受请求中包含的实体作为请求行中的 Request-URI 标识的资源的新下级。它本质上意味着 <code>POST</code> request-URI 应该是一个集合 URI。<code>POST/questions</code></td></tr><tr><td><code>PUT</code> 方法是幂等的。因此，如果您多次发送重试请求，那应该等同于单个请求修改。</td><td><code>POST</code> 不是幂等的。因此，如果您重试请求 N 次，您将最终拥有 N 个资源，其中 N 个不同的 URI 在服务器上创建。</td></tr><tr><td><code>PUT</code> 当您想要修改已经属于资源集合的单一资源时使用。PUT 完全替换资源。如果请求更新资源的一部分，请使用 PATCH。</td><td><code>POST</code> 要在资源集合下添加子资源时使用。</td></tr><tr><td>虽然 <code>PUT</code> 是幂等的，但我们不会缓存它的反应。</td><td>除非响应包含适当的 Cache-Control 或 Expires 头字段，否则对此方法的响应不可<code>缓存</code>。但是，303（请参阅其他）响应可用于指示用户代理检索可缓存资源。</td></tr><tr><td>通常，在实践中，始终使用 PUT 进行 UPDATE 操作。</td><td>始终 POST 用于 CREATE 操作。</td></tr></tbody></table><h3 id="PUT-与-POST-举例"><a href="#PUT-与-POST-举例" class="headerlink" title="PUT 与 POST : 举例"></a>PUT 与 POST : 举例</h3><p>假设我们正在设计网络应用程序。让我们列出几个 URI 及其目的，以便更好地了解如何使用 <code>POST</code> 以及何时使用 <code>PUT</code> 操作。</p><p>GET &#x2F;device-management&#x2F;devices : 获取所有设备<br><strong>POST</strong> &#x2F;device-management&#x2F;devices : 创建新设备</p><p>GET &#x2F;device-management&#x2F;devices&#x2F;{id} : 获取 id 对应的设备信息<br><strong>PUT</strong> &#x2F;device-management&#x2F;devices&#x2F;{id} : 更新由 id 标识的设备信息<br>DELETE &#x2F;device-management&#x2F;devices&#x2F;{id} : 通过 id 删除设备信息</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;自己写的接口总是看起来不那么优雅，系统的学习了一下 Restful 接口规范。希望我写的接口不再那么混乱吧。&lt;/p&gt;</summary>
    
    
    
    
    <category term="http" scheme="http://blog.whbbit.cn/blog/tags/http/"/>
    
    <category term="restful" scheme="http://blog.whbbit.cn/blog/tags/restful/"/>
    
    <category term="接口" scheme="http://blog.whbbit.cn/blog/tags/%E6%8E%A5%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>Vue组件中data为什么是函数</title>
    <link href="http://blog.whbbit.cn/2021/02/02/blog/vue-data/"/>
    <id>http://blog.whbbit.cn/2021/02/02/blog/vue-data/</id>
    <published>2021-02-02T09:25:11.000Z</published>
    <updated>2021-02-02T09:25:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>Vue 组件中的 data 为什么是函数？</p><span id="more"></span><p>在 vue 中组件是可以复用的，如果使用对象的方式来创建一个 data，那么后加载的 data 如果改变，会影响其他 data 中的数据。<br>如果使用函数的方式来创建 data，那么每个函数实例都是独立的，不会互相影响。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Vue 组件中的 data 为什么是函数？&lt;/p&gt;</summary>
    
    
    
    
    <category term="vue" scheme="http://blog.whbbit.cn/blog/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>一句代码将个人网站嵌入小程序中</title>
    <link href="http://blog.whbbit.cn/2021/01/26/blog/mini-program-outwebsite/"/>
    <id>http://blog.whbbit.cn/2021/01/26/blog/mini-program-outwebsite/</id>
    <published>2021-01-26T08:52:06.000Z</published>
    <updated>2021-01-26T08:52:06.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>没错，就是一句代码将个人网站嵌入到小程序中。或者说将外部网站嵌入小程序中。</p></blockquote><p><img src="https://whbbit-picture.oss-cn-beijing.aliyuncs.com/img/20210126170525.png"></p><span id="more"></span><p>代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;web-view src=&quot;http://blog.whbbit.cn&quot;&gt;&lt;/web-view&gt;</span><br></pre></td></tr></table></figure><p>结果：<br><img src="https://whbbit-picture.oss-cn-beijing.aliyuncs.com/img/20210126165551.jpg"></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;没错，就是一句代码将个人网站嵌入到小程序中。或者说将外部网站嵌入小程序中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://whbbit-picture.oss-cn-beijing.aliyuncs.com/img/20210126170525.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="小程序" scheme="http://blog.whbbit.cn/blog/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>HTML基础知识整理1️⃣</title>
    <link href="http://blog.whbbit.cn/2021/01/22/blog/html01/"/>
    <id>http://blog.whbbit.cn/2021/01/22/blog/html01/</id>
    <published>2021-01-22T08:54:35.000Z</published>
    <updated>2021-01-22T08:54:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>HTML基础整理<br><img src="https://whbbit-picture.oss-cn-beijing.aliyuncs.com/img/20210122182054.png"></p><span id="more"></span><h2 id="web标准"><a href="#web标准" class="headerlink" title="web标准"></a>web标准</h2><p>web标准是网页制作的标准，它不是一个标准，而是由一系列标准组成的。<br>web标准包含了三方面：</p><ol><li>结构：HTML</li><li>表现：CSS</li><li>行为：JavaScript</li></ol><blockquote><p>web标准由W3C万维网联盟，制定HTML和CSS的相关标准<br>ECMS（欧洲电脑厂联合会），制定JavaScript相关标准</p></blockquote><h2 id="HTML相关概念"><a href="#HTML相关概念" class="headerlink" title="HTML相关概念"></a>HTML相关概念</h2><h3 id="1-HTML"><a href="#1-HTML" class="headerlink" title="1. HTML"></a>1. HTML</h3><p>超文本标记语言（Hyper Text Markup Language）</p><h3 id="2-XML"><a href="#2-XML" class="headerlink" title="2. XML"></a>2. XML</h3><p>可扩展超文本标记语言（Extensible Hyper Text Markup Language）</p><blockquote><p>XHTML 与 HTML 相比并未增加新的标签，只是语法要求更加严格</p></blockquote><h3 id="3-HTML5"><a href="#3-HTML5" class="headerlink" title="3. HTML5"></a>3. HTML5</h3><p>HTML5是HTML的第五次重大修改，是指具体意义上的HTML5</p><blockquote><p>广义上的H5是指web前端领域的核心技术</p></blockquote><h2 id="HTML基本结构"><a href="#HTML基本结构" class="headerlink" title="HTML基本结构"></a>HTML基本结构</h2><h3 id="1-文档结构"><a href="#1-文档结构" class="headerlink" title="1. 文档结构"></a>1. 文档结构</h3><p>作用： 声明文档类型，告知浏览器使用那种 HTML 或 XHTML 规范</p><blockquote><p>HTML5 文档声明语法如下：<br><code>&lt;!DOCTYPE html&gt;</code> 或 <code>&lt;!doctype html&gt;</code></p></blockquote><h3 id="2-网页的根元素（根标签）"><a href="#2-网页的根元素（根标签）" class="headerlink" title="2. 网页的根元素（根标签）"></a>2. 网页的根元素（根标签）</h3><p>网页的根元素是 <code>&lt;html&gt;&lt;/html&gt;</code> 所有的网页内容和标签都必须放到 <code>&lt;html&gt;&lt;/html&gt;</code> 之间。<br><code>&lt;html&gt;&lt;/html&gt;</code> 标签包含了两大部分： head 部分和 body 部分</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>head 部分：<br>主要用于设置字符编码、网站标题、关键字描述、引入一些外部文件（CSS文件或JavaScript文件）<br>body 部分<br>所有需要在网页中显示的内容及放置内容的标签都必须放置在 body 部分</p></blockquote><h2 id="HTML基本语法"><a href="#HTML基本语法" class="headerlink" title="HTML基本语法"></a>HTML基本语法</h2><h3 id="1-常规标记（双标记）"><a href="#1-常规标记（双标记）" class="headerlink" title="1. 常规标记（双标记）"></a>1. 常规标记（双标记）</h3><p>语法： <code>&lt;标记 属性=&quot;属性值&quot;&gt;&lt;/标记&gt;</code><br>例如：<code>&lt;h1 id=&quot;title&quot; class=&quot;title&quot;&gt;&lt;/h1&gt;</code></p><h3 id="2-空标记（单标记）"><a href="#2-空标记（单标记）" class="headerlink" title="2. 空标记（单标记）"></a>2. 空标记（单标记）</h3><p>语法：<code>&lt;标记 属性=&quot;属性值&quot; /&gt;</code>，或 <code>&lt;标记 属性=&quot;属性值&quot;&gt;</code><br>例如：<code>&lt;img src=&quot;https://whbbit-picture.oss-cn-beijing.aliyuncs.com/img/20201227153140.png&quot; alt=&quot;😂，这里是图片&quot; /&gt;</code></p><h2 id="HTML常用标记"><a href="#HTML常用标记" class="headerlink" title="HTML常用标记"></a>HTML常用标记</h2><h3 id="1-文本标题"><a href="#1-文本标题" class="headerlink" title="1. 文本标题"></a>1. 文本标题</h3><p>语法：<code>&lt;hx&gt;&lt;/hx&gt;</code> </p><blockquote><p>x 为 1-6 之间的数字。h1对应最大的标题，h6对应最小的标题，字体都有加粗效果。<br>例如：<code>&lt;h1&gt;好好学习，天天向上👌&lt;/h1&gt;</code></p></blockquote><h3 id="2-段落标题"><a href="#2-段落标题" class="headerlink" title="2. 段落标题"></a>2. 段落标题</h3><p>语法：<code>&lt;p&gt;内容&lt;/p&gt;</code><br>例如：<code>&lt;p&gt;这里是段落内容&lt;/p&gt;</code></p><h3 id="3-换行"><a href="#3-换行" class="headerlink" title="3. 换行"></a>3. 换行</h3><p>语法：<code>&lt;hr /&gt;</code> 或 <code>&lt;hr &gt;</code></p><h3 id="4-HTML中的转义字符"><a href="#4-HTML中的转义字符" class="headerlink" title="4. HTML中的转义字符"></a>4. HTML中的转义字符</h3><ul><li><code>&amp;nbsp;</code> 空格</li><li><code>&amp;gt;</code> &gt;</li><li><code>&amp;lt;</code> &lt;</li><li><code>&amp;copy;</code> &amp;copy;版权符号</li><li><code>&amp;reg;</code>  &amp;reg;注册商标</li></ul><h3 id="5-加粗"><a href="#5-加粗" class="headerlink" title="5. 加粗"></a>5. 加粗</h3><p>语法：<code>&lt;b&gt;加粗&lt;/b&gt;</code> 或 <code>&lt;strong&gt;加粗&lt;/strong&gt;</code><br>例如：<b>加粗</b></p><h3 id="6-倾斜"><a href="#6-倾斜" class="headerlink" title="6. 倾斜"></a>6. 倾斜</h3><p>语法：<code>&lt;i&gt;倾斜&lt;/i&gt;</code> 或 <code>&lt;em&gt;倾斜&lt;/em&gt;</code><br>例如：<i>倾斜</i> </p><h3 id="7-分隔线"><a href="#7-分隔线" class="headerlink" title="7. 分隔线"></a>7. 分隔线</h3><p>语法：<code>&lt;hr /&gt;</code> 或 <code>&lt;hr&gt;</code><br>例如： <hr ></p><h3 id="8-上标和下标"><a href="#8-上标和下标" class="headerlink" title="8. 上标和下标"></a>8. 上标和下标</h3><p>语法：<code>&lt;sup&gt;上标&lt;/sup&gt;</code> <code>&lt;sub&gt;下标&lt;/sub&gt;</code><br>例如：log<sub>2</sub>2 , 3<sup>2</sup> &#x3D; 9</p><h3 id="9-删除线"><a href="#9-删除线" class="headerlink" title="9. 删除线"></a>9. 删除线</h3><p>语法：<code>&lt;del&gt;删除线&lt;/del&gt;</code> 或 <code>&lt;u&gt;删除线&lt;/u&gt;</code><br>例如：<del>删除线</del></p><h2 id="HTML中的三种列表"><a href="#HTML中的三种列表" class="headerlink" title="HTML中的三种列表"></a>HTML中的三种列表</h2><h3 id="1-有序列表"><a href="#1-有序列表" class="headerlink" title="1. 有序列表"></a>1. 有序列表</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>html<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>css<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>js<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><p>例如：</p><ol>  <li>html</li>  <li>css</li>  <li>js</li></ol><h3 id="2-无序列表"><a href="#2-无序列表" class="headerlink" title="2. 无序列表"></a>2. 无序列表</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>html<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>css<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>js<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>例如：</p><ul>  <li>html</li>  <li>css</li>  <li>js</li></ul><h3 id="3-自定义列表"><a href="#3-自定义列表" class="headerlink" title="3. 自定义列表"></a>3. 自定义列表</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>web前端<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>未来都是web前端的天下<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><p>例如：</p><dl>  <dt>web前端</dt>  <dd>未来都是web前端的天下</dd>  <dt>js</dt>  <dd>能用js实现的，一定都会用js实现</dd></dl><blockquote><p>dl 和 dd 是并列的</p></blockquote><h2 id="相对路径的三种写法"><a href="#相对路径的三种写法" class="headerlink" title="相对路径的三种写法"></a>相对路径的三种写法</h2><ol><li>当前文件和目标文件在同一目录下,直接写目标文件的文件名即可,或在其前加上<code>./</code>表示当前目录:</li></ol><p>  <code>&lt;img src=&quot;main.jpg&quot; alt=&quot;主要图片&quot; /&gt;</code> 或者 <code>&lt;img src=&quot;./main.jpg&quot; alt=&quot;主要图片&quot; /&gt;</code></p><ol start="2"><li><p>当前文件和目标文件所在文件夹在同一目录下:<br>  <code>&lt;img src=&quot;img/main.jpg&quot; alt=&quot;主要图片&quot; /&gt;</code> 或者 <code>&lt;img src=&quot;./img/main.jpg&quot; alt=&quot;主要图片&quot; /&gt;</code></p></li><li><p>当前文件所在文件夹和目标文件所在文件夹在同一目录下:<br>  <code>&lt;img src=&quot;../img/main.jpg&quot; alt=&quot;主要图片&quot; /&gt;</code></p></li></ol><blockquote><p>.&#x2F;表示当前目录, ..&#x2F;表示上级目录</p></blockquote><h2 id="在网页中插入图片"><a href="#在网页中插入图片" class="headerlink" title="在网页中插入图片"></a>在网页中插入图片</h2><p>语法: <code>&lt;img src=&quot;图片路径&quot; title=&quot;鼠标悬停显示&quot; width=&quot;图片宽度&quot; height=&quot;图片高度&quot; alt=&quot;图片显示不出来时显示此段文字&quot; /&gt;</code><br>例如:<br><code>&lt;img src=&quot;https://whbbit-picture.oss-cn-beijing.aliyuncs.com/img/20201227153140.png&quot; title=&quot;划过显示&quot; width=&quot;200&quot; height=&quot;200&quot; alt=&quot;月空&quot; /&gt;</code><br><img src="https://whbbit-picture.oss-cn-beijing.aliyuncs.com/img/20201227153140.png" title="划过显示" width="200" height="200" alt="月空" /></p><blockquote><p>title属性设置鼠标悬停在图片上时显示提示文本<br>alt属性设置图片加载失败时显示的替换文本,<strong>有优化作用</strong></p></blockquote><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><p>语法: <code>&lt;a href=&quot;连接地址或本地文件路径&quot; target=&quot;_blank&quot; title=&quot;悬停显示文字&quot; &gt;图片或文字&lt;/a&gt;</code></p><p>例如:  </p><ul><li><code>&lt;a href=&quot;http://blog.whbbit.cn&quot;&gt;月空&lt;/a&gt; 在本页跳转</code><a href="http://blog.whbbit.cn">月空</a></li><li><code>&lt;a href=&quot;http://blog.whbbit.cn&quot; target=&quot;_blank&quot;&gt;月空&lt;/a&gt; 在新窗口页跳转</code><a href="http://blog.whbbit.cn" target="_blank">月空</a></li><li><code>&lt;a href=&quot;#&quot;&gt;月空&lt;/a&gt; 跳转到本页顶部</code><a href="#">月空</a><blockquote><p>target&#x3D;”_blank” 设置超链接在新窗口打开<br>href&#x3D;”#” 时,超链接为空连接,跳转到本页顶部</p></blockquote></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;HTML基础整理&lt;br&gt;&lt;img src=&quot;https://whbbit-picture.oss-cn-beijing.aliyuncs.com/img/20210122182054.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="html" scheme="http://blog.whbbit.cn/blog/categories/html/"/>
    
    
    <category term="html" scheme="http://blog.whbbit.cn/blog/tags/html/"/>
    
    <category term="web" scheme="http://blog.whbbit.cn/blog/tags/web/"/>
    
    <category term="基础" scheme="http://blog.whbbit.cn/blog/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>React基础</title>
    <link href="http://blog.whbbit.cn/2021/01/13/blog/React01/"/>
    <id>http://blog.whbbit.cn/2021/01/13/blog/React01/</id>
    <published>2021-01-13T11:54:17.000Z</published>
    <updated>2021-01-13T11:54:17.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://whbbit-picture.oss-cn-beijing.aliyuncs.com/img/20210113203047.png"></p><ol><li>React组件</li><li>React中this指向的问题</li><li>React中如何进行数据的双向绑定<span id="more"></span></li></ol><h2 id="React组件"><a href="#React组件" class="headerlink" title="React组件"></a>React组件</h2><blockquote><p>React组件分为函数式组件(无状态组件)和类组件(有状态组件)</p></blockquote><h3 id="函数组件和类组件的区别"><a href="#函数组件和类组件的区别" class="headerlink" title="函数组件和类组件的区别"></a><strong>函数组件和类组件的区别</strong></h3><p>用构造函数创建出来的组件叫做 <code>无状态组件</code> 或 <code>函数式组件</code><br>用class关键字创建出来的组件叫做 <code>有状态组件</code> 或 <code>类组件</code><br>有状态组件和无状态组件的本质区别是有无 <code>state</code> 属性</p><blockquote><p>使用class关键字创建的组件，有自己的私有数据和生命周期函数<br>使用function关键字创建的组件，只有props，没有自己的私有数据和生命周期函数</p></blockquote><p>函数组件的性能比类组件的性能高，因为类组件使用时要实例化，而函数组件直接执行函数取返回值即可。为了提高性能，尽量使用函数式组件。</p><ol><li>是否有this</li><li>是否具有状态state</li><li>是否有生命周期</li></ol><table><thead><tr><th align="center">区别</th><th align="center">函数组件</th><th align="center">类组件</th></tr></thead><tbody><tr><td align="center">是否有this</td><td align="center">没有</td><td align="center">有</td></tr><tr><td align="center">是否有生命周期</td><td align="center">没有</td><td align="center">有</td></tr><tr><td align="center">是否有状态status</td><td align="center">没有</td><td align="center">有</td></tr></tbody></table><h2 id="React中this指向问题"><a href="#React中this指向问题" class="headerlink" title="React中this指向问题"></a>React中this指向问题</h2><ol><li><p>声明方法时使用箭头函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">state = &#123; <span class="attr">i</span> : <span class="number">0</span> &#125;</span><br><span class="line">add = <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.setState(&#123;</span><br><span class="line"><span class="attr">i</span> : <span class="built_in">this</span>.state.i + <span class="number">1</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;this.state.i&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.add&#125;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>调用方法时，改变函数的this指向</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">state = &#123; <span class="attr">i</span> : <span class="number">0</span>&#125;</span><br><span class="line"><span class="function"><span class="title">add</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.setState(&#123;</span><br><span class="line"><span class="attr">i</span> : <span class="built_in">this</span>.state.i + <span class="number">1</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;this.state.i&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.add.bind(this)&#125;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在函数的构造器中将方法的this指向进行重定向</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line"><span class="title">constructor</span> (<span class="params"></span>)&#123;</span><br><span class="line"><span class="built_in">super</span>()</span><br><span class="line"><span class="built_in">this</span>.add = <span class="built_in">this</span>.add.bind(<span class="built_in">this</span>)</span><br><span class="line">&#125;</span><br><span class="line">state = &#123; <span class="attr">i</span> : <span class="number">0</span> &#125;</span><br><span class="line"><span class="function"><span class="title">add</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.setState(&#123;</span><br><span class="line"><span class="attr">i</span> : <span class="built_in">this</span>.state.i + <span class="number">1</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;this.state.i&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.add&#125;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="React中实现数据的双向绑定"><a href="#React中实现数据的双向绑定" class="headerlink" title="React中实现数据的双向绑定"></a>React中实现数据的双向绑定</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">inputValue</span> : <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  &#125;</span><br><span class="line"> <span class="comment">// 输入框输入</span></span><br><span class="line">  handleInput = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      <span class="attr">inputValue</span> : e.target.value</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span> &gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">input</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">value</span>=<span class="string">&#123;this.state.inputValue&#125;</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">onInput</span>=<span class="string">&#123;this.handleInput&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          /&gt;</span> </span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;this.state.inputValue&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://whbbit-picture.oss-cn-beijing.aliyuncs.com/img/20210113203047.png&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;React组件&lt;/li&gt;
&lt;li&gt;React中this指向的问题&lt;/li&gt;
&lt;li&gt;React中如何进行数据的双向绑定</summary>
    
    
    
    <category term="React" scheme="http://blog.whbbit.cn/blog/categories/react/"/>
    
    
    <category term="React" scheme="http://blog.whbbit.cn/blog/tags/react/"/>
    
    <category term="前端框架" scheme="http://blog.whbbit.cn/blog/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
</feed>
